# ServerGameLogic.gd - –°–µ—Ä–≤–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ë–ï–ó UI
extends Node
class_name ServerGameLogic

# –°–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã (–∑–∞–º–µ–Ω–∞ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
var game_state: SharedGameData.GameState
var card_database: Dictionary = {}

# –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
var is_game_active: bool = false
var connected_players: Array[String] = []

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–µ –ª–æ–≥–∏ (–µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å –∫–æ–Ω—Å–æ–ª—å—é)
var server_console_log: TextEdit
var enable_console_logging: bool = false

signal game_started
signal game_ended(winner: String)
signal turn_changed(new_player: String, turn_number: int)
signal server_log(message: String)

func _ready():
	# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Å–µ—Ä–≤–µ—Ä
	if not NetworkMode.is_server():
		queue_free()
		return
	
	_log_to_console("=== STARTING SERVER GAME LOGIC ===")
	
	# –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	game_state = SharedGameData.GameState.new()
	
	# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∫–∞—Ä—Ç
	_load_card_database()
	
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ NetworkManager (–Ω–µ –Ω–∞–ø—Ä—è–º—É—é –∫ —Å–µ—Ç–µ–≤—ã–º —Å–æ–±—ã—Ç–∏—è–º)
	_connect_to_network_manager()
	
	# –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–Ω—Å–æ–ª—å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	_setup_console_logging()
	
	_log_to_console("Server game logic initialized and ready for players")

func _connect_to_network_manager():
	"""–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ NetworkManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"""
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–æ–±—ã—Ç–∏—è–º —á–µ—Ä–µ–∑ NetworkManager
	if NetworkManager.has_signal("player_connected"):
		NetworkManager.player_connected.connect(_on_player_connected)
	if NetworkManager.has_signal("player_disconnected"):
		NetworkManager.player_disconnected.connect(_on_player_disconnected)
	
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤
	server_log.connect(_on_server_log_message)
	
	_log_to_console("Connected to NetworkManager events")

func _setup_console_logging():
	"""–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å —Å–µ—Ä–≤–µ—Ä–∞"""
	# –ò—â–µ–º –∫–æ–Ω—Å–æ–ª—å —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å)
	server_console_log = get_node_or_null("/root/*/ServerTerminal/ServerLog")
	
	if server_console_log:
		enable_console_logging = true
		_log_to_console("Console logging enabled")
	else:
		enable_console_logging = false
		print("No server console found - using print() for logs")

func _log_to_console(message: String):
	"""–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ print"""
	var timestamp = Time.get_datetime_string_from_system()
	var full_message = "[" + timestamp + "] " + message
	
	# –í—Å–µ–≥–¥–∞ –≤—ã–≤–æ–¥–∏–º –≤ –æ–±—ã—á–Ω—ã–π –ª–æ–≥
	print(full_message)
	
	# –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Å–æ–ª—å - –¥–æ–±–∞–≤–ª—è–µ–º —Ç—É–¥–∞
	if enable_console_logging and is_instance_valid(server_console_log):
		server_console_log.text += full_message + "\n"
		
		# –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª
		await get_tree().process_frame
		server_console_log.scroll_vertical = server_console_log.get_line_count()
	
	# –ò—Å–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º
	server_log.emit(full_message)

func _on_server_log_message(message: String):
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
	# –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ª–æ–≥–æ–≤
	pass

func _load_card_database():
	"""–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç"""
	card_database = {
		"Meadow": SharedGameData.CardData.new("Meadow", "Increases income by 50", 150),
		"iceball": SharedGameData.CardData.new("iceball", "Attack spell", 100),
		"Fishing Place": SharedGameData.CardData.new("Fishing Place", "Increases income by 30", 200)
	}
	
	_log_to_console("üìã Loaded " + str(card_database.size()) + " cards into database")

func _process_player_request(action_data: Dictionary):
	"""–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∏–≥—Ä–æ–∫–æ–≤"""
	var player_name = action_data.get("player_id", "Unknown")
	_log_to_console("üì° Processing request: " + action_data.type + " from " + player_name)
	
	match action_data.type:
		"request_start_game":
			_handle_start_game_request(action_data)
		"request_card_play":
			_handle_card_play_request(action_data)
		"request_end_turn":
			_handle_end_turn_request(action_data)
		"request_game_state":
			_send_full_game_state_to_player(action_data.get("sender_peer_id", 0))
		_:
			_log_to_console("‚ö† Unknown request type: " + action_data.type)

# ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ì–†–û–ô =====

func _handle_start_game_request(action_data: Dictionary):
	"""–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É"""
	if is_game_active:
		_log_to_console("‚ö† Game start requested but game already active")
		return
	
	# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ NetworkManager
	if NetworkManager.has_method("get_connected_players"):
		connected_players = NetworkManager.get_connected_players()
	else:
		# Fallback - –ø–æ–ª—É—á–∞–µ–º –∏–∑ lobby_players
		connected_players = NetworkManager.lobby_players.keys()
	
	if connected_players.size() < 2:
		_log_to_console("‚ö† Cannot start game - only " + str(connected_players.size()) + " players connected")
		return
	
	_log_to_console("üéÆ Starting game with players: " + str(connected_players))
	
	# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤
	_initialize_players()
	
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	game_state.current_player = connected_players[0]
	game_state.current_turn = 1
	game_state.game_phase = "playing"
	is_game_active = true
	
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
	_broadcast_game_state()
	
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É –µ–≥–æ —Ä—É–∫—É
	_send_hands_to_players()
	
	game_started.emit()
	_log_to_console("‚úÖ Game started successfully - Turn 1, Player: " + game_state.current_player)

func _initialize_players():
	"""–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤"""
	for player_name in connected_players:
		var player_data = SharedGameData.PlayerData.new()
		player_data.name = player_name
		player_data.wealth = 1000
		player_data.income = 100
		
		# –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–æ–ª–æ–¥—É (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
		var starting_deck = ["Meadow", "iceball", "Fishing Place", "Meadow", "iceball", "Fishing Place"]
		
		# –î–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –≤ —Ä—É–∫—É
		for i in range(4):
			if i < starting_deck.size():
				player_data.hand.append(starting_deck[i])
		
		# –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –≤ –∫–æ–ª–æ–¥—É
		for i in range(4, starting_deck.size()):
			player_data.deck.append(starting_deck[i])
		
		game_state.players[player_name] = player_data
		_log_to_console("üë§ Initialized player: " + player_name + " (Hand: " + str(player_data.hand.size()) + " cards, Wealth: $" + str(player_data.wealth) + ")")

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ê–†–¢ =====

func _handle_card_play_request(action_data: Dictionary):
	"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã"""
	var player_name = action_data.player_id
	var card_name = action_data.data.card_name
	var hex_pos = Vector2i(action_data.data.hex_position.x, action_data.data.hex_position.y)
	
	_log_to_console("üéØ Card play request: " + card_name + " by " + player_name + " at (" + str(hex_pos.x) + "," + str(hex_pos.y) + ")")
	
	# –í–∞–ª–∏–¥–∞—Ü–∏—è
	var validation_result = _validate_card_play(player_name, card_name, hex_pos)
	if not validation_result.success:
		_log_to_console("‚ùå Card play rejected: " + validation_result.message)
		_send_error_to_player(action_data.get("sender_peer_id", 0), validation_result.message)
		return
	
	# –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
	var play_result = _execute_card_play(player_name, card_name, hex_pos)
	if play_result.success:
		# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
		_broadcast_game_state()
		_send_success_to_player(action_data.get("sender_peer_id", 0), "Card played successfully")
		_log_to_console("‚úÖ Card play successful: " + card_name + " placed at (" + str(hex_pos.x) + "," + str(hex_pos.y) + ")")
	else:
		_log_to_console("‚ùå Card play execution failed: " + play_result.message)
		_send_error_to_player(action_data.get("sender_peer_id", 0), play_result.message)

func _validate_card_play(player_name: String, card_name: String, hex_pos: Vector2i) -> SharedGameData.ActionResult:
	"""–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã"""
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –∏–≥—Ä–æ–∫–∞
	if game_state.current_player != player_name:
		return SharedGameData.ActionResult.new(false, "Not your turn")
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä–æ–∫–∞
	var player_data = game_state.get_player_data(player_name)
	if not player_data:
		return SharedGameData.ActionResult.new(false, "Player not found")
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä—Ç—É –≤ —Ä—É–∫–µ
	if not player_data.has_card_in_hand(card_name):
		return SharedGameData.ActionResult.new(false, "Card not in hand")
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é
	if game_state.is_position_occupied(hex_pos):
		return SharedGameData.ActionResult.new(false, "Position already occupied")
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
	var card_data = card_database.get(card_name)
	if not card_data:
		return SharedGameData.ActionResult.new(false, "Invalid card")
	
	if not player_data.can_afford(card_data.cost):
		return SharedGameData.ActionResult.new(false, "Not enough wealth")
	
	return SharedGameData.ActionResult.new(true, "Valid play")

func _execute_card_play(player_name: String, card_name: String, hex_pos: Vector2i) -> SharedGameData.ActionResult:
	"""–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã"""
	var player_data = game_state.get_player_data(player_name)
	var card_data = card_database.get(card_name)
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	var old_wealth = player_data.wealth
	var old_income = player_data.income
	
	# –£–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏
	player_data.remove_card_from_hand(card_name)
	
	# –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
	player_data.spend_wealth(card_data.cost)
	
	# –†–∞–∑–º–µ—â–∞–µ–º –Ω–∞ –ø–æ–ª–µ
	var field_card = SharedGameData.FieldCard.new(card_name, player_name, hex_pos, game_state.current_turn)
	var pos_key = str(hex_pos.x) + "," + str(hex_pos.y)
	game_state.field[pos_key] = field_card
	
	# –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –∫–∞—Ä—Ç—ã
	card_data.apply_effects(game_state, player_name, hex_pos)
	
	# –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
	var wealth_change = player_data.wealth - old_wealth
	var income_change = player_data.income - old_income
	
	_log_to_console("üí∞ " + player_name + " wealth: $" + str(old_wealth) + " ‚Üí $" + str(player_data.wealth) + " (" + str(wealth_change) + ")")
	if income_change != 0:
		_log_to_console("üìà " + player_name + " income: +" + str(old_income) + " ‚Üí +" + str(player_data.income) + " (" + str(income_change) + ")")
	
	return SharedGameData.ActionResult.new(true, "Card played")

# ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –•–û–î–ê–ú–ò =====

func _handle_end_turn_request(action_data: Dictionary):
	"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ö–æ–¥–∞"""
	var player_name = action_data.player_id
	
	if game_state.current_player != player_name:
		_send_error_to_player(action_data.sender_peer_id, "Not your turn")
		return
	
	_execute_end_turn()

func _execute_end_turn():
	"""–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ö–æ–¥–∞"""
	_log_to_console("‚è≠ Ending turn for player: " + game_state.current_player)
	
	# –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ—Ö–æ–¥—ã
	_apply_turn_income()
	
	# –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	_switch_to_next_player()
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
	if _check_game_end_conditions():
		_end_game()
		return
	
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
	_broadcast_game_state()
	
	turn_changed.emit(game_state.current_player, game_state.current_turn)

func _apply_turn_income():
	"""–ù–∞—á–∏—Å–ª—è–µ—Ç –¥–æ—Ö–æ–¥ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º"""
	_log_to_console("üíµ Applying turn income to all players:")
	
	for player_name in game_state.players.keys():
		var player_data = game_state.players[player_name]
		var old_wealth = player_data.wealth
		player_data.wealth += player_data.income
		
		_log_to_console("  üí∞ " + player_name + ": $" + str(old_wealth) + " + $" + str(player_data.income) + " = $" + str(player_data.wealth))

func _switch_to_next_player():
	"""–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞"""
	var current_index = connected_players.find(game_state.current_player)
	var next_index = (current_index + 1) % connected_players.size()
	
	var old_player = game_state.current_player
	game_state.current_player = connected_players[next_index]
	
	# –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ö–æ–¥–∞
	if next_index == 0:
		game_state.current_turn += 1
		_log_to_console("üîÑ Turn " + str(game_state.current_turn) + " started")
	
	_log_to_console("üë§ Player change: " + old_player + " ‚Üí " + game_state.current_player)

# ===== –°–ï–¢–ï–í–û–ï –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï =====

func _broadcast_game_state():
	"""–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º"""
	var state_data = _prepare_public_game_state()
	
	NetworkManager._broadcast_action_result.rpc({
		"type": "game_state_update",
		"data": state_data
	})
	
	print("Game state broadcasted to all players")

func _prepare_public_game_state() -> Dictionary:
	"""–ì–æ—Ç–æ–≤–∏—Ç –ø—É–±–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã (–±–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)"""
	var public_state = {
		"players": {},
		"field": {},
		"turn_info": {
			"current_player": game_state.current_player,
			"current_turn": game_state.current_turn,
			"game_phase": game_state.game_phase
		}
	}
	
	# –ü—É–±–ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–∞—Ö
	for player_name in game_state.players.keys():
		var player_data = game_state.players[player_name]
		public_state.players[player_name] = {
			"name": player_data.name,
			"wealth": player_data.wealth,
			"income": player_data.income,
			"hand_size": player_data.hand.size(),
			"deck_size": player_data.deck.size()
		}
	
	# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª–µ
	for pos_key in game_state.field.keys():
		var field_card = game_state.field[pos_key]
		public_state.field[pos_key] = {
			"card_name": field_card.card_name,
			"owner": field_card.owner,
			"hex_position": {"x": field_card.hex_position.x, "y": field_card.hex_position.y},
			"placed_turn": field_card.placed_turn
		}
	
	return public_state

func _send_hands_to_players():
	"""–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É –µ–≥–æ —Ä—É–∫—É (–ø—Ä–∏–≤–∞—Ç–Ω–æ)"""
	for player_name in game_state.players.keys():
		var player_data = game_state.players[player_name]
		var peer_id = _get_peer_id_for_player(player_name)
		
		if peer_id > 0:
			NetworkManager._send_private_data.rpc_id(peer_id, {
				"type": "player_hand_update",
				"data": {
					"hand": player_data.hand.duplicate(),
					"deck_size": player_data.deck.size()
				}
			})

func _get_peer_id_for_player(player_name: String) -> int:
	"""–ü–æ–ª—É—á–∞–µ—Ç peer_id –∏–≥—Ä–æ–∫–∞ –ø–æ –∏–º–µ–Ω–∏"""
	# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ NetworkManager
	return NetworkManager.get_peer_id_for_player(player_name)

func _send_error_to_player(peer_id: int, message: String):
	"""–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∏–≥—Ä–æ–∫—É"""
	NetworkManager._send_private_data.rpc_id(peer_id, {
		"type": "error_message",
		"data": {"message": message}
	})

func _send_success_to_player(peer_id: int, message: String):
	"""–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∏–≥—Ä–æ–∫—É"""
	NetworkManager._send_private_data.rpc_id(peer_id, {
		"type": "success_message",
		"data": {"message": message}
	})

# ===== –û–ö–û–ù–ß–ê–ù–ò–ï –ò–ì–†–´ =====

func _check_game_end_conditions() -> bool:
	"""–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã"""
	return game_state.current_turn > game_state.max_turns

func _end_game():
	"""–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É"""
	var winner = _determine_winner()
	is_game_active = false
	
	_log_to_console("üèÜ GAME ENDED!")
	_log_to_console("ü•á Winner: " + winner)
	
	# –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	_log_final_results()
	
	NetworkManager._broadcast_action_result.rpc({
		"type": "game_ended",
		"data": {"winner": winner}
	})
	
	game_ended.emit(winner)

func _log_final_results():
	"""–õ–æ–≥–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã"""
	_log_to_console("üìä FINAL RESULTS:")
	
	var sorted_players = []
	for player_name in game_state.players.keys():
		var player_data = game_state.players[player_name]
		sorted_players.append({
			"name": player_name,
			"wealth": player_data.wealth,
			"income": player_data.income
		})
	
	# –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–æ–≥–∞—Ç—Å—Ç–≤—É
	sorted_players.sort_custom(func(a, b): return a.wealth > b.wealth)
	
	for i in range(sorted_players.size()):
		var player = sorted_players[i]
		var position = str(i + 1)
		var medal = "ü•á" if i == 0 else ("ü•à" if i == 1 else "ü•â")
		_log_to_console("  " + medal + " " + position + ". " + player.name + " - $" + str(player.wealth) + " (Income: +$" + str(player.income) + "/turn)")

func _determine_winner() -> String:
	"""–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"""
	var highest_wealth = 0
	var winner = ""
	
	for player_name in game_state.players.keys():
		var player_data = game_state.players[player_name]
		if player_data.wealth > highest_wealth:
			highest_wealth = player_data.wealth
			winner = player_name
	
	return winner

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô =====

func _on_player_connected(player_name: String):
	"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞"""
	_log_to_console("‚Üí Player connected: " + player_name)

func _on_player_disconnected(player_name: String):
	"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞"""
	_log_to_console("‚Üê Player disconnected: " + player_name)
	
	if is_game_active:
		_log_to_console("‚ö† Game paused due to player disconnect")
		# –ú–æ–∂–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å AI

# ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

func _send_full_game_state_to_player(peer_id: int):
	"""–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∏–≥—Ä–æ–∫—É"""
	if peer_id <= 0:
		return
		
	var state_data = _prepare_public_game_state()
	
	NetworkManager._send_private_data.rpc_id(peer_id, {
		"type": "full_game_state",
		"data": state_data
	})
	
	_log_to_console("üìã Full game state sent to peer " + str(peer_id))

# ===== –£–¢–ò–õ–ò–¢–´ =====

func get_game_state() -> SharedGameData.GameState:
	"""–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã"""
	return game_state

func is_player_turn(player_name: String) -> bool:
	"""–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ö–æ–¥ –ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞"""
	return game_state.current_player == player_name

func get_player_hand(player_name: String) -> Array[String]:
	"""–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä—É–∫—É –∏–≥—Ä–æ–∫–∞"""
	var player_data = game_state.get_player_data(player_name)
	return player_data.hand if player_data else []

func get_game_statistics() -> Dictionary:
	"""–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏"""
	return {
		"is_active": is_game_active,
		"current_turn": game_state.current_turn if game_state else 0,
		"current_player": game_state.current_player if game_state else "",
		"players_count": connected_players.size(),
		"cards_on_field": game_state.field.size() if game_state else 0
	}

# ===== DEBUG –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì =====

func print_game_status():
	"""–í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –≤ –∫–æ–Ω—Å–æ–ª—å"""
	if not is_game_active:
		_log_to_console("üî¥ Game is not active")
		return
	
	_log_to_console("üü¢ GAME STATUS:")
	_log_to_console("  Turn: " + str(game_state.current_turn) + "/" + str(game_state.max_turns))
	_log_to_console("  Current player: " + game_state.current_player)
	_log_to_console("  Cards on field: " + str(game_state.field.size()))
	
	for player_name in game_state.players.keys():
		var player_data = game_state.players[player_name]
		_log_to_console("  üë§ " + player_name + ": $" + str(player_data.wealth) + " (+$" + str(player_data.income) + "/turn, " + str(player_data.hand.size()) + " cards)")

# Input –¥–ª—è debug –∫–æ–º–∞–Ω–¥ (–µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å –∫–æ–Ω—Å–æ–ª—å—é)
func _input(event):
	if not NetworkMode.is_server():
		return
		
	if event.is_action_pressed("ui_accept"):  # Space
		print_game_status()
	elif event.is_action_pressed("ui_select"):  # Tab  
		_log_to_console("üìä Server uptime: " + str(Time.get_unix_time_from_system() - get_tree().get_frame()) + " seconds")
