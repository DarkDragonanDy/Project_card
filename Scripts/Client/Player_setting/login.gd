extends Control

@onready var login_input: LineEdit = $VBoxContainer/ColorRect_Start_game/Name_space
@onready var password_input: LineEdit = $VBoxContainer/ColorRect_Start_game2/Password_space
@onready var login_button: Button = $VBoxContainer/ColorRect_Collection/Login_button


# –í login.gd –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É:

func _ready():
	pass
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
	if NetworkMode.is_server():
		_transform_to_server_terminal()
	
	

func _transform_to_server_terminal():
	# –ü–û–õ–ù–û–°–¢–¨–Æ —Å–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ª–æ–≥–∏–Ω–∞
	$VBoxContainer/ColorRect_Start_game.visible = false
	$VBoxContainer/ColorRect_Start_game2.visible = false
	$VBoxContainer/ColorRect_Collection.visible = false
	
	# –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª
	_create_server_terminal()

func _create_server_terminal():
	# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
	var terminal_container = VBoxContainer.new()
	terminal_container.name = "ServerTerminal"
	add_child(terminal_container)
	
	# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
	var title_label = Label.new()
	title_label.text = "GAME SERVER TERMINAL"
	title_label.add_theme_font_size_override("font_size", 24)
	title_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	terminal_container.add_child(title_label)
	
	# –ü–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
	var log_display = TextEdit.new()
	log_display.name = "ServerLog"
	log_display.size_flags_horizontal = Control.SIZE_EXPAND_FILL
	log_display.size_flags_vertical = Control.SIZE_EXPAND_FILL
	log_display.editable = false
	log_display.placeholder_text = "Server starting up...\n"
	log_display.custom_minimum_size = Vector2(600, 400)
	terminal_container.add_child(log_display)
	
	# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
	var stats_container = HBoxContainer.new()
	terminal_container.add_child(stats_container)
	
	var players_label = Label.new()
	players_label.name = "PlayersCount"
	players_label.text = "Connected Players: 0"
	stats_container.add_child(players_label)
	
	var games_label = Label.new()
	games_label.name = "GamesCount" 
	games_label.text = "Active Games: 0"
	stats_container.add_child(games_label)
	
	# –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
	
	
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä–Ω—ã–º —Å–æ–±—ã—Ç–∏—è–º
	_connect_server_events()
	
	# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
	_auto_start_server()

func _connect_server_events():
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–æ–±—ã—Ç–∏—è–º NetworkManager –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤
	NetworkManager.server_started.connect(_on_server_started)
	NetworkManager.player_connected.connect(_on_player_connected_terminal)
	NetworkManager.player_disconnected.connect(_on_player_disconnected_terminal)
	NetworkManager.game_action_received.connect(_on_game_action_terminal)

func _auto_start_server():
	print("Auto-starting server...")
	_log_to_terminal("Initializing server...")
	
	# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ NetworkManager
	var success = await NetworkManager.start_server()
	if success:
		_log_to_terminal("‚úì Server started on port " + str(NetworkMode.server_port))
		_log_to_terminal("Waiting for players...")
	else:
		_log_to_terminal("‚úó Failed to start server!")

func _log_to_terminal(message: String):
	var log_display = get_node_or_null("ServerTerminal/ServerLog")
	if log_display:
		var timestamp = Time.get_datetime_string_from_system()
		var full_message = "[" + timestamp + "] " + message + "\n"
		log_display.text += full_message
		
		# –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑
		await get_tree().process_frame
		log_display.scroll_vertical = log_display.get_line_count()



func _on_server_started():
	_log_to_terminal("‚úì Server is now listening for connections")
	_update_server_stats()

func _on_player_connected_terminal(player_name: String):
	_log_to_terminal("‚Üí Player connected: " + player_name)
	_update_server_stats()

func _on_player_disconnected_terminal(player_name: String):
	_log_to_terminal("‚Üê Player disconnected: " + player_name)
	_update_server_stats()

func _on_game_action_terminal(action_data: Dictionary):
	var player = action_data.get("player_id", "Unknown")
	var action = action_data.get("type", "unknown_action")
	
	match action:
		"play_card":
			var card_name = action_data.data.get("card_name", "Unknown Card")
			_log_to_terminal("üéÆ " + player + " played card: " + card_name)
		"end_turn":
			_log_to_terminal("‚è≠ " + player + " ended their turn")
		"surrender":
			_log_to_terminal("üè≥ " + player + " surrendered")
		_:
			_log_to_terminal("üì° " + player + " performed: " + action)

func _update_server_stats():
	var players_count = NetworkManager.get_connected_players().size()
	var active_games = 1 if players_count >= 2 else 0
	
	var players_label = get_node_or_null("ServerTerminal/HBoxContainer/PlayersCount")
	var games_label = get_node_or_null("ServerTerminal/HBoxContainer/GamesCount")
	
	if players_label:
		players_label.text = "Connected Players: " + str(players_count)
	if games_label:
		games_label.text = "Active Games: " + str(active_games)

func _stop_server():
	_log_to_terminal("Stopping server...")
	NetworkManager.disconnect_from_network()
	_log_to_terminal("Server stopped. You can close this window.")
	
	# –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	await get_tree().create_timer(1.0).timeout
	get_tree().quit()
#
func _on_login_pressed() -> void:
	var login = login_input.text
	var password = password_input.text
	
		
	if PlayerDatabase.verify_login(login, password):
		await NetworkManager.connect_to_server()
		PlayerDatabase.current_user = login
		
		
		# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–æ–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		DeckData.load_user_deck()
		
		await get_tree().create_timer(0.5).timeout
		get_tree().change_scene_to_file("res://Scenes/node_scene.tscn")

		
	
	
